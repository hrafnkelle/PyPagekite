.\"                                      Hey, EMACS: -*- nroff -*-
.\" First parameter, NAME, should be all caps
.\" Second parameter, SECTION, should be 1-8, maybe w/ subsection
.\" other parameters are allowed: see man(7), man(1)
.TH PAGEKITE 1 "2011-01-06"
.\" Please adjust this date whenever revising the manpage.
.\"
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" for manpage-specific macros, see man(7)
.SH PAGEKITE
pagekite \- Run public servers without reconfiguring firewalls
.SH SYNOPSIS
.B pagekite.py
.RI [ options ] 
.SH DESCRIPTION
.PP
\fBpagekite\fP is a program allows you to run servers and services on 
computers or other mobile devices that do not have a direct connection 
to the internet (at least not accessable from the outside). 
.SH OPTIONS
.SS Common options
.P
  --optfile=X    -o X     Read options from file X. 
                          Default is ~/.pagekiterc.
.P 
  --httpd=X:P    -H X:P   Enable the HTTP user interface on 
                          hostname X, port P.
.P
  --pemfile=X    -P X     Use X as a PEM key for the HTTPS UI.
.P
  --httppass=X   -X X     Require password X to access the UI.
.P
   --nozchunks            Disable zlib tunnel compression.
.P
   --buffers       N      Buffer at most N kB of back-end data 
                          before blocking.
.P
   --logfile=F    -L F    Log to file F.
.P
   --daemonize    -Z      Run as a daemon.
.P
   --runas        -U U:G  Set UID:GID after opening our 
                          listening sockets.
.P
   --pidfile=P    -I P    Write PID to the named file.
.P
   --clean                Skip loading the default 
                          configuration file.
.P
   --nocrashreport        Don't send anonymous crash reports 
                          to PageKite.net.
.P
   --tls_default=N        Default name to use for SSL, if SNI 
                          and tracking fail.
.P
   --tls_endpoint=N:F     Terminate SSL/TLS for name N, using 
                          key/cert from F.
.P
   --defaults             Set some reasonable default setings.
.P
   --errorurl=U  -E U     URL to redirect to when back-ends are 
                          not found.
.P
   --settings             Dump the current settings to STDOUT, 
                          formatted as an options file would be.


.SS Front-end options
.P
   --isfrontend   -f      Enable front-end mode.
.P
   --authdomain=X -A X    Use X as a remote authentication domain.
.P
   --host=H       -h H    Listen on H (hostname).
.P
   --ports=A,B,C  -p A,B  Listen on ports A, B, C, ...
.P
   --portalias=A:B        Report port A as port B to backends.
.P
   --protos=A,B,C         Accept the listed protocols for tunneling.
.P
   --rawports=A,B,C       Listen on ports A, B, C, ... 
                          (raw/timed connections)
.P
   --domain=proto,proto2,pN:domain:secret
                          Accept tunneling requests for the named 
                          protocols and specified domain, using 
                          the given secret.  A * may be used as a 
                          wildcard for subdomains. (FIXME)

.SS Back-end options
.P
   --all          -a      Terminate early if any tunnels fail to 
                          register.
.P
   --dyndns=X     -D X    Register changes with DynDNS provider X.  
                          X can either be simply the name of one of 
                          the 'built-in' providers, or a URL format 
                          string for ad-hoc updating.

.P
   --frontends=N:X:P      Choose N front-ends from X (a DNS domain 
                          name), port P.
.P
   --frontend=host:port   Connect to the named front-end server.
.P
   --new          -N      Don't attempt to connect to the domain's 
                          old front-end.
.P
   --socksify=S:P         Connect via SOCKS server S, port P 
                          (requires socks.py)
.P
   --torify=S:P           Same as socksify, but more paranoid.
.P
   --noprobes             Reject all probes for back-end liveness.
.P
   --fe_certname=N        Connect using SSL, accepting valid certs for 
                          domain N.
.P
   --ca_certs=PATH        Path to your trusted root SSL 
                          certificates file.
.P
   --backend=proto:domain:host:port:secret
                          Configure a back-end service on host:port, 
                          using protocol proto and the given domain. 
                          As a special case, if host and port are left 
                          blank and the proto is HTTP or HTTPS, the 
                          built-in server will be used.

.SS About the options file
.P
The options file contains the same options as are available to the command
line, with the restriction that there be exactly one "argument" per line.
.P
The leading '--' may also be omitted for readability, and for the same reason
it is recommended to use the long form of the options in the configuration
file (also, as the short form may not always parse correctly).
.P
Blank lines and lines beginning with # (comments) are stripped from the
options file before it is parsed.  It is perfectly acceptable to have multiple
options files, and options files can include other options files.
.SH EXAMPLES
.P
Create a config-file with default options, and then edit it.
.RS
pagekite.py --defaults --settings > ~/.pagekite.rc
.RE
.RS
vim ~/.pagekite.rc
.RE

.P
Run pagekite with the HTTP UI, for interactive configuration.
.RS
pagekite.py --httpd=localhost:8888
.RE
.RS
firefox http://localhost:8888/
.RE

.P
Fly a PageKite on pagekite.net for somedomain.com, and register the new
front-ends with the No-IP Dynamic DNS provider.
.RS
pagekite.py \\
       --frontends=1:frontends.b5p.us:443 \\
       --dyndns=user:pass@no-ip.com \\
       --backend=http:somedomain.com:localhost:80:mygreatsecret
.RE

